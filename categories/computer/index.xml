<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer on ~/christopher.loessl</title>
    <link>https://loessl.org/categories/computer/</link>
    <description>~/christopher.loessl (computer)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Feb 2021 18:15:03 +0100</lastBuildDate>
    
    <atom:link href="https://loessl.org/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TIL: Big Ben</title>
      <link>https://loessl.org/posts/til-big-ben/</link>
      <pubDate>Sun, 21 Feb 2021 18:15:03 +0100</pubDate>
      
      <guid>https://loessl.org/posts/til-big-ben/</guid>
      <description>&lt;p&gt;An interesting side-channel attack—that the Britished used—during World War Two…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;During World War Two, BBC News was broadcast to Nazi-occupied Europe. Each news programme opened with a live broadcast of Big Ben tolling the hour – the magical sound of freedom. Ingenious German physicists found a way to determine the weather conditions in London based on tiny differences in the tone of the broadcast ding-dongs. This information offered invaluable help to the Luftwaffe. When the British Secret Service discovered this, they replaced the live broadcast with a set recording of the famous clock.&lt;/p&gt;
&lt;p&gt;— Sapiens: A Brief History of Humankind by Yuval Noah Harari&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>TIL: Mac in-place sed</title>
      <link>https://loessl.org/posts/til-mac-in-place-sed/</link>
      <pubDate>Wed, 17 Jun 2020 22:16:31 +0200</pubDate>
      
      <guid>https://loessl.org/posts/til-mac-in-place-sed/</guid>
      <description>&lt;p&gt;TIL how to use in-place sed on Mac.&lt;/p&gt;
&lt;p&gt;I always thought I have to use the GNU tools version of sed for in-place sed, but I was wrong. Mac sed supports in-place editing as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/pattern/d&amp;#39;&lt;/span&gt; ./infile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a caveat though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Edit files in-place, saving backups with the specified extension.  If a zero-length extension is given, no backup will be saved.  It is not recommended to give a zero-length extension when in-place editing files, as you risk corruption or partial content in situations where disk space is exhausted, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Replace all occurances of &lt;code&gt;foo&lt;/code&gt; with &lt;code&gt;bar&lt;/code&gt; in the file test.txt, without creating a backup of the file:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Blocks and Closures on Stack and Heap</title>
      <link>https://loessl.org/posts/blocks-closures-on-stack-and-heap/</link>
      <pubDate>Tue, 04 Mar 2014 01:56:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/blocks-closures-on-stack-and-heap/</guid>
      <description>&lt;h2 id=&#34;blocks-on-the-stack&#34;&gt;Blocks on the Stack&lt;/h2&gt;
&lt;p&gt;While reading through Apple’s open source code (headers) I came across &lt;a href=&#34;http://opensource.apple.com/source/libdispatch/libdispatch-339.1.9/dispatch/queue.h&#34;&gt;queue.h&lt;/a&gt; and stumbled over the following warning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; [...]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * dispatch_block_t block;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * if (x) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     block = ^{ printf(&amp;#34;true\n&amp;#34;); };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * } else {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     block = ^{ printf(&amp;#34;false\n&amp;#34;); };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * block(); // unsafe!!!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * What is happening behind the scenes:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * if (x) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     struct Block __tmp_1 = ...; // setup details
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     block = &amp;amp;__tmp_1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * } else {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     struct Block __tmp_2 = ...; // setup details
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     block = &amp;amp;__tmp_2;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * As the example demonstrates, the address of a stack variable is escaping the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * scope in which it is allocated. That is a classic C bug.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I got curious and so I followed the rabbit &lt;a href=&#34;http://opensource.apple.com/source/libdispatch/libdispatch-339.1.9/dispatch/queue.h&#34;&gt;down&lt;/a&gt; &lt;a href=&#34;http://objectivistc.tumblr.com/post/10523983325/would-you-please-crash-my-out-of-scope-stack-closure&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;http://www.friday.com/bbum/2009/08/29/blocks-tips-tricks/&#34;&gt;rabbit&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Blocks/Articles/bxUsing.html&#34;&gt;hole&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of, a block in C is defined by &lt;code&gt;{ ... }&lt;/code&gt;. Identifiers defined inside this block have scope visibility / lifetime (used from now on interchangeable) limited to that block. The &lt;code&gt;if (x)&lt;/code&gt; statement in Apple’s example above is creating such a C block, in which a struct is created and that struct is assigned to (Objective-C) block (called closures from now on for easier differentiation).
Every C block creates a new visibility scope were stack variables are stored (stack area) similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Call_stack#Structure&#34;&gt;stack frames&lt;/a&gt;. Which means after the block is closed it is not save any more to access these memory locations.&lt;/p&gt;
&lt;p&gt;Closures are (apparently) the only Objective-C objects that start on the stack, the problem with that is, that the visibility is gone after the closing brace of the if-then-else and hence the block is lost. So the block has to be “saved” by copying it from the stack to the heap before the C block is finished.&lt;/p&gt;
&lt;h2 id=&#34;compilers&#34;&gt;Compilers&lt;/h2&gt;
&lt;p&gt;If you run the example code from Apple you will realise, that the code works flawless. It does not crash with a dreaded segfault and it even behaves exactly as you would expect it to.
Why? This is because clang does not reuse stack areas that were previously used and therefore nothing overwrite the memory location with something different (assuming you are not doing it from a different thread). The situation looks different if you are using gcc with the -O2 flag. gcc then reuses stack areas and overwrites your stack area. Since gcc is not capable of closures and clang doesn’t reuse stack areas you might be never run actually into a problem (There is a &lt;a href=&#34;#closures-inside-of-an-array&#34;&gt;caveat&lt;/a&gt; tought&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;). This behaviour is, though, just an implementation detail that might change or vary from compiler to compiler and therefore you should not bet on it, it might change.
You can find some demo source code &lt;a href=&#34;http://objectivistc.tumblr.com/post/10523983325/would-you-please-crash-my-out-of-scope-stack-closure&#34;&gt;here&lt;/a&gt; that shows &lt;code&gt;gcc -O0&lt;/code&gt; versus &lt;code&gt;gcc -O2&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;closures-inside-of-an-array&#34;&gt;Closures inside of an Array&lt;/h2&gt;
&lt;p&gt;A time where you run into problems is, when you try to save closures in an array like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;Blocky)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;);
Blocky b[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;};
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b %d&amp;#34;&lt;/span&gt;, b[i]());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://www.friday.com/bbum/2009/08/29/blocks-tips-tricks/&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The output is “2 2 2” instead of the expected &amp;ldquo;1 2 3&amp;rdquo;. This is because the stack area used for the &lt;code&gt;for loop&lt;/code&gt; is the same for all iterations and therefore every new created closures overwrites the closures created in the previous iteration. In &lt;code&gt;b[1]&lt;/code&gt;, &lt;code&gt;b[2]&lt;/code&gt; and &lt;code&gt;b[3]&lt;/code&gt; is just a pointer stored to the closure and since the place of creation on the stack was the same for all three closures the pointer is the same which leads to &lt;code&gt;b[1]==b[2]==b[3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wrote a small program that shows the different behaviours of closures on stack, closures on heap and blocks that use different stack areas.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;@autoreleasepool&lt;/span&gt; {

        &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;Block)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p0, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p1;

        Block blockOnStack[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
        Block blockOnHeap [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; int1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; int2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
            Block closure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i; };

            blockOnStack[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;             closure;
            blockOnHeap [i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Block_copy( closure );

            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;closure pointer:     %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,                blockOnStack[i] );
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Block_copy pointer:                 %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, blockOnHeap [i] );
        }

        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Executing blocks from the stack&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer b[%d]: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, blockOnStack[i]   );
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execute b[%d]: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, blockOnStack[i]() );
        }
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Executing blocks from the heap&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer b[%d]: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, blockOnHeap[i]   );
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execute b[%d]: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, blockOnHeap[i]() );
        }
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;C blocks&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;normal&amp;#34; C block scope 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; blockInt0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
            p0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;blockInt0;
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;normal&amp;#34; block scope 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; blockInt1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
            p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;blockInt1;
        }

        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p0 = %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;p1 = %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, p0, p1);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Every closure that is created inside the
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; loop is created at the exact same
memory location on the stack.

The copied closures on the heap all have
different pointer addresses

closure pointer:     0x7fff54850bf0
Block_copy pointer:                 0x7fe5eac07c70
closure pointer:     0x7fff54850bf0
Block_copy pointer:                 0x7fe5eac07ca0
closure pointer:     0x7fff54850bf0
Block_copy pointer:                 0x7fe5eac07cd0
Stack pointers, all same ^^^^^^^^^^
Heap pointers, all distinct         ^^^^^^^^^^^^^^

Executing blocks from the stack
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fff54850bf0
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fff54850bf0
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fff54850bf0
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

Executing blocks from the heap
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fe5eac07c70
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fe5eac07ca0
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
pointer b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7fe5eac07cd0
Execute b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

C blocks
Unlike the &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; loop C block scopes create a new stack
area &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; every visibility scope.
Unless compiled with e.g. gcc -O2
Remember: This is a implementation detail!!!
p0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x7fff54850be4
p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x7fff54850be0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code and output can be found for easy reading and copying in this &lt;a href=&#34;https://gist.github.com/hashier/9317235&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;there always is &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Property: strong and copy</title>
      <link>https://loessl.org/posts/property-strong-and-copy/</link>
      <pubDate>Tue, 25 Feb 2014 22:36:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/property-strong-and-copy/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  main.m
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  strong_retain_copy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  Created by Christopher Loessl on 25/02/14.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  Copyright (c) 2014 Christopher Loessl. All rights reserved.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;NSObject&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;strong&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;@property&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;copy&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nonatomic&lt;/span&gt;) NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nick;

&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; main(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; argv[])
{

    &lt;span style=&#34;color:#66d9ef&#34;&gt;@autoreleasepool&lt;/span&gt; {

        Person &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;per &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[Person alloc] init];
        NSMutableString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;aName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [NSMutableString stringWithString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Christopher&amp;#34;&lt;/span&gt;];

        &lt;span style=&#34;color:#75715e&#34;&gt;// The pointer &amp;#34;per.name&amp;#34; is changed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;per.name&amp;#34; points at the same location as &amp;#34;someName&amp;#34; afterwards
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        per.name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aName;

        &lt;span style=&#34;color:#75715e&#34;&gt;// This is equal to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// per.address = [someName copy];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Therefore the points are not the same afterwards
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        per.nick &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aName;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Changing &amp;#34;someName&amp;#34; to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        [aName setString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;hashier&amp;#34;&lt;/span&gt;];

        NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;per.name   : %@&amp;#34;&lt;/span&gt;, per.name);
        NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;per.nick   : %@&amp;#34;&lt;/span&gt;, per.nick);
        NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;someName   : %@&amp;#34;&lt;/span&gt;, aName);
        NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pointer 1: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pointer 2: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pointer 3: %p&amp;#34;&lt;/span&gt;, per.name, per.nick, aName);

    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find this code in my github gists &lt;a href=&#34;https://gist.github.com/hashier/9218108&#34;&gt;here&lt;/a&gt; for easy copy and compile&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The code is commented so you should really quickly see what the difference between &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;strong&lt;/code&gt; is doing here. By marking the pointer &lt;code&gt;copy&lt;/code&gt; the object is copied during assignment and not just the pointer is copied over. For that to work, the &lt;code&gt;NSCopying&lt;/code&gt; has the be implemented for that class. Luckily &lt;code&gt;NSString&lt;/code&gt;, &lt;code&gt;NSDictionary&lt;/code&gt;, and many others already support this protocol.&lt;/p&gt;
&lt;p&gt;So now after you know what it makes for a difference with pointers, let’s see when you would want to use one over the other.&lt;/p&gt;
&lt;p&gt;Even though &lt;code&gt;per.name&lt;/code&gt; is &lt;code&gt;NSString&lt;/code&gt; and should not be mutable it is possible to alter it through the 2nd pointer to the same address which is a &lt;code&gt;NSMutableString&lt;/code&gt; pointer. This said you can use &lt;code&gt;copy&lt;/code&gt; to help you prevent this kind of trap so you might always want to use &lt;code&gt;copy&lt;/code&gt; if the immutable class you are using conforms to &lt;code&gt;NSCopying&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, if you keep good track of your pointers and you know what you are doing, this could save you time during assignment because the assignment is much faster than copying the whole object&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. So if you are only using immutable objects pointer assignments can help get some more speed. But remember&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil [Knuth]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;clang -std=c99 -framework Foundation &amp;lt;file.m&amp;gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Depending of the implementation of the object, this might be a shallow or deep copy. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Multiple Xcode Targets and Tests</title>
      <link>https://loessl.org/posts/multiple-xcode-targets-and-tests/</link>
      <pubDate>Sun, 09 Feb 2014 15:58:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/multiple-xcode-targets-and-tests/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Go to targets -&amp;gt; Select target -&amp;gt; Duplicate (I duplicated a target which name was “tests”)&lt;/li&gt;
&lt;li&gt;Rename the target to whatever you want (I use “Tooth” here)&lt;/li&gt;
&lt;li&gt;Go to “Manage Schemes” and delete the scheme with the old name (“tests copy”) and click on “Autocreate Schemes Now”&lt;/li&gt;
&lt;li&gt;Rename the “tests copy-Info.plist” to “Tooth-Info.plist” in your “Project Navigator” (or the path where Xcode can find the .plist file)&lt;/li&gt;
&lt;li&gt;(If you need a different .pch file, you have to duplicate it in finder and add it to your project, otherwise “Tooth” will use the same .pch file as “tests”)&lt;/li&gt;
&lt;li&gt;Go to the “Build Settings” of your new target and make sure that you check the following key value pairs:
&lt;ul&gt;
&lt;li&gt;Info.plist File: Change from “tests copy-Info.plist” to “Tooth-Info.plist”&lt;/li&gt;
&lt;li&gt;Product Name: Change from “tests copy” to “$(TARGET_NAME)”&lt;/li&gt;
&lt;li&gt;Prefix Header: Change accordingly if you need a different .pch file and created it earlier&lt;/li&gt;
&lt;li&gt;Preprocessor Macros
&lt;ul&gt;
&lt;li&gt;Add something like “TOOTH=1” to your “Tooth” target and “TESTS=1” to your “tests” target (in Debug and Release)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your project doesn’t build (or link) any more now, just reopen Xcode.&lt;/p&gt;
&lt;p&gt;This is how you can decide in which target you are inside your code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if TESTS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;I&amp;#39;m the tests target&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#elif TOOTH
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;I&amp;#39;m the Tooth target&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Error: You added a new target and didn&amp;#39;t set the Macros&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-a-new-test-target&#34;&gt;Adding a new test target&lt;/h2&gt;
&lt;p&gt;Of course you want to be able to write tests for your new target as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the “Test Navigator”&lt;/li&gt;
&lt;li&gt;On the bottom left click the “+” sign and chose “New Test Target…”&lt;/li&gt;
&lt;li&gt;Select the Target you want to build tests for&lt;/li&gt;
&lt;li&gt;WAIT! Don’t worry that you don’t see any tests for the new test target, just wait…. until it’s there, or restart Xcode&lt;/li&gt;
&lt;li&gt;Right click on it and enable your test target&lt;/li&gt;
&lt;li&gt;Go to “Build Settings” and select your tests target
&lt;ul&gt;
&lt;li&gt;Framework Search Path: Add “$(SRCROOT)” otherwise you will get errors with Frameworks like Crashlytics that it can’t find #import “Crashlytics/Crashlytics.h” (I add this as a project key value so I don’t have to do it for every new test target)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start writing tests (:&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mdfind &amp; mdls &amp; Spotlight</title>
      <link>https://loessl.org/posts/mdfind-mdls-spotlight/</link>
      <pubDate>Fri, 27 Dec 2013 20:02:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/mdfind-mdls-spotlight/</guid>
      <description>&lt;p&gt;Searching for files with Spotlight is awesome and you can actually use the power of Spotlight even in the console. But first let me show you some nice features of Spotlight.&lt;/p&gt;
&lt;h2 id=&#34;spotlight&#34;&gt;Spotlight&lt;/h2&gt;
&lt;p&gt;Searching for all images that contain &lt;code&gt;me&lt;/code&gt;, are of kind image and were taken with flash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind kind:image flash:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spotlight supports a whole lot of these search fields like, duration, pixel height, width, last opened, ISO speed, aperture, exposure time and so forth for a full list check this &lt;a href=&#34;http://hints.macworld.com/dlfiles/spotlight_cmds.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;mdfind&#34;&gt;mdfind&lt;/h2&gt;
&lt;p&gt;Now let’s move over to the console. Here you can do this cool stuff with a tool called &lt;code&gt;mdfind&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s find all audio files that are longer than 10 minutes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind -interpret &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration:&amp;gt;=600 kind:music&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-interpret&lt;/code&gt; interprets the search string as if you typed it into Spotlight. &lt;code&gt;mdfind&lt;/code&gt; supports another mode in which you can search on fields of the meta information directly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind -literal &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kMDItemDurationSeconds &amp;gt; 600 &amp;amp;&amp;amp; kMDItemContentTypeTree == public.audio&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All mp3s that are longer than 10 minutes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kMDItemDurationSeconds &amp;gt; 600 &amp;amp;&amp;amp; kMDItemKind = &amp;#34;MPEG Audio Layer 3&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All &lt;a href=&#34;https://atp.fm&#34;&gt;ATP&lt;/a&gt; podcasts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(kMDItemAuthors == &amp;#34;atp&amp;#34;cdw)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cdw stands for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignore case&lt;/li&gt;
&lt;li&gt;ignore diacritical&lt;/li&gt;
&lt;li&gt;word based&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All by the &lt;a href=&#34;http://5by5.tv&#34;&gt;5by5&lt;/a&gt; network&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kMDItemAuthors = &amp;#34;*5by5.tv*&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both are of course possible in Spotlight as well by simply searching for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;author:atp
author:5by5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Find all pictures taken with an iPhone 4S on the last day of the year 2011 and the first day of 2012. The range includes the from date but not the until date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdfind &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind:image created:31/12/11-2/1/12 model:&amp;#34;iPhone 4S&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mdls&#34;&gt;mdls&lt;/h2&gt;
&lt;p&gt;How to figure out these strange looking search fields, that’s where &lt;code&gt;mdls&lt;/code&gt; comes into play.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdls &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Prints out all meta information fields for that file. With &lt;code&gt;mdfind&lt;/code&gt; you can then search for those fields.&lt;/p&gt;
&lt;p&gt;If you are curious about all possible field values you can get them with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdimport -X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mdimport -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be warned, it is a lot of information.&lt;/p&gt;
&lt;h2 id=&#34;final-note&#34;&gt;Final note&lt;/h2&gt;
&lt;p&gt;It’s worth having a look at the man page of these commands and the help provided with &lt;code&gt;mdfind -h&lt;/code&gt; because the information is not consistent. For example the man page doesn’t tell you about the &lt;code&gt;-s&lt;/code&gt; flag which brings smart folders to the command line.&lt;/p&gt;
&lt;p&gt;And for the curious how I came across &lt;code&gt;mdfind&lt;/code&gt;. I stumbled upon that command while reading this &lt;a href=&#34;http://brettterpstra.com/2013/12/22/quick-tip-tag-filer-without-hazel/&#34;&gt;blog post&lt;/a&gt; by Brett Terpstra.&lt;/p&gt;
&lt;p&gt;Sources:
&lt;a href=&#34;http://hints.macworld.com/dlfiles/spotlight_cmds.pdf&#34;&gt;Spotlight reference&lt;/a&gt;
&lt;a href=&#34;http://www.macdevcenter.com/pub/a/mac/2006/01/04/mdfind.html?page=1&#34;&gt;MacDevCenter about mdfind&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Localization With iLocalize</title>
      <link>https://loessl.org/posts/ios-localization-with-ilocalize/</link>
      <pubDate>Fri, 27 Dec 2013 18:24:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/ios-localization-with-ilocalize/</guid>
      <description>&lt;p&gt;I did it once before and now I have to do it again - and of course, I forgot how to do it.
This time I&amp;rsquo;ll write it down how on way of localisation of an iOS project works.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t use nib files and all user facing strings are set in code with NSLocalizedStrings(&amp;hellip;). If you are using nibs or need to translate strings in Storyboard and/or nib files, your approach might differ.&lt;/p&gt;
&lt;p&gt;English is considered as the base language and Swedish as the translation.&lt;/p&gt;
&lt;h2 id=&#34;this-is-the-workflow-if-you-added-new-nslocalizedstring-in-your-code&#34;&gt;This is the workflow if you added new NSLocalizedString(&amp;hellip;) in your code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Have your project with NSLocalizedString&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;genstrings -o en.lproj **/*.m&lt;/code&gt; in the correct folder (zsh needed)&lt;/li&gt;
&lt;li&gt;start iLocalize&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Project&amp;rdquo; -&amp;gt; &amp;ldquo;Update from files&amp;hellip;&amp;rdquo; -&amp;gt; add the en.lproj/Localizable.strings -&amp;gt; &amp;ldquo;Update the project from a new version of these files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;click &amp;ldquo;Update&amp;rdquo;&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;this-is-the-workflow-if-you-updated-the-svlprojlocalizablestrings-files&#34;&gt;This is the workflow if you updated the sv.lproj/Localizable.strings files&lt;/h2&gt;
&lt;p&gt;e.g., manually added them in vim or you had someone translate them for you.&lt;/p&gt;
&lt;p&gt;It might be always good idea to update your Base language first so you can directly see after importing the Swedish Localizable.strings file which &amp;ldquo;Translation Keys&amp;rdquo; have changed and need updating or if the translator got everything.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In iLocalize on the top left you choose (for this example) Swedish&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Project&amp;rdquo; -&amp;gt; &amp;ldquo;Update from files&amp;hellip;&amp;rdquo; -&amp;gt; select your sv.lproj/Localizable.strings file-&amp;gt; &amp;ldquo;Update a localised language from these files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Make sure in the box Swedish is selected&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Update&amp;rdquo;&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>git diff and ObjectiveC</title>
      <link>https://loessl.org/posts/git-diff-and-objective-c/</link>
      <pubDate>Thu, 28 Nov 2013 23:51:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/git-diff-and-objective-c/</guid>
      <description>&lt;p&gt;When writing Objective-C code and using git you probably realised that the &lt;code&gt;git diff&lt;/code&gt; output does not mention the function name in which the change occurred. This can easily be changed.&lt;/p&gt;
&lt;p&gt;Run the following command inside your git repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.m diff=objc&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; .gitattributes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Source: &lt;a href=&#34;https://gist.github.com/bjhomer/2473281&#34;&gt;https://gist.github.com/bjhomer/2473281&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mavericks Wallpapers and Screen Saver Images</title>
      <link>https://loessl.org/posts/mavericks-wallpapers-and-screen-saver-images/</link>
      <pubDate>Fri, 25 Oct 2013 20:56:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/mavericks-wallpapers-and-screen-saver-images/</guid>
      <description>&lt;p&gt;Have a folder with all the Mavericks wallpapers and screen saver images but without wasting a lot of space.&lt;/p&gt;
&lt;p&gt;So you can set it as the folder that should be used for randomly choosing a background plus you can delete the ones you don&amp;rsquo;t want.&lt;/p&gt;
&lt;p&gt;So we generate a folder in which we link all the default Mavericks wallpapers + screen saver images and set this as our folder to chose background images from, here&amp;rsquo;s the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir folder
cd folder
find /Library/Desktop&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Pictures /Library/Screen&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Savers/Default&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Collections &lt;span style=&#34;color:#ae81ff&#34;&gt;\(&lt;/span&gt; -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.jpg&amp;#34;&lt;/span&gt; -or -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt; -and &lt;span style=&#34;color:#ae81ff&#34;&gt;\!&lt;/span&gt; -path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.thumbnails*&amp;#34;&lt;/span&gt; -and &lt;span style=&#34;color:#ae81ff&#34;&gt;\!&lt;/span&gt; -path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*Solid Colors*&amp;#34;&lt;/span&gt; -exec ln -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt; . &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Deep Wizardry: Stack Unwinding</title>
      <link>https://loessl.org/posts/deep-wizardry-stack-unwinding/</link>
      <pubDate>Wed, 16 Oct 2013 13:30:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/deep-wizardry-stack-unwinding/</guid>
      <description>&lt;p&gt;Nice blog post about &lt;a href=&#34;http://blog.reverberate.org/2013/05/deep-wizardry-stack-unwinding.html&#34;&gt;stack unwinding&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brendan&#39;s blog » The USE Method: Mac OS X Performance Checklist</title>
      <link>https://loessl.org/posts/brendans-blog-the-use-method-mac-os-x-performance-checklist/</link>
      <pubDate>Sun, 06 Oct 2013 17:24:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/brendans-blog-the-use-method-mac-os-x-performance-checklist/</guid>
      <description>&lt;p&gt;&amp;ldquo;Mac OS X Performance Checklist&amp;rdquo; is one of the best blog posts I have read in a long time.&lt;/p&gt;
&lt;p&gt;The posts describes how to find bottlenecks if something is not working as it should be. Awesome read!&lt;/p&gt;
&lt;p&gt;via &lt;a href=&#34;http://dtrace.org/blogs/brendan/2013/09/18/the-use-method-mac-os-x-performance-checklist/&#34;&gt;Brendan&amp;rsquo;s blog » The USE Method: Mac OS X Performance Checklist&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fixing TruePreview for Apple Mail 6.6</title>
      <link>https://loessl.org/posts/fixing-truepreview-for-apple-mail-6-6/</link>
      <pubDate>Mon, 23 Sep 2013 20:33:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/fixing-truepreview-for-apple-mail-6-6/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults write ~/Library/Mail/Bundles/TruePreview.mailbundle/Contents/Info SupportedPluginCompatibilityUUIDs -array-add DAFFB2B4-77BC-4C25-8CE1-2405E652D54B
defaults write ~/Library/Mail/Bundles/TruePreview.mailbundle/Contents/Info SupportedPluginCompatibilityUUIDs -array-add 2B98D2DD-000B-4521-83EB-7BFCB9B161C8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you started mail before executing these two commands, make sure to copy the plugin from the Bundle &lt;code&gt;(Disbaled)&lt;/code&gt; folder back to the Bundle folder.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Send Broadcast Messages to Android</title>
      <link>https://loessl.org/posts/send-broadcast-messages-to-android/</link>
      <pubDate>Wed, 04 Sep 2013 17:38:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/send-broadcast-messages-to-android/</guid>
      <description>&lt;p&gt;Faking a received SMS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;adb shell am broadcast &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a android&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Telephony&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SMS_RECEIVED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>common.h</title>
      <link>https://loessl.org/posts/common-h/</link>
      <pubDate>Wed, 04 Sep 2013 15:24:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/common-h/</guid>
      <description>&lt;p&gt;So I got sick with NSLog and wrote myself a simple wrapper around it.&lt;/p&gt;
&lt;p&gt;Which you can find &lt;a href=&#34;https://gist.github.com/hashier/6436829&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Syntax is the same but the printout is why nicer to read, it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49.543&lt;/span&gt; AppName[&lt;span style=&#34;color:#ae81ff&#34;&gt;4841&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a0b] (FilterAppDelegate.m:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;[FilterAppDelegate application:didFinishLaunchingWithOptions:]) TEST LOG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So you can see the filename, line number, function and everything else important directly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automatically Increment Build Number (CFBundleVersion)</title>
      <link>https://loessl.org/posts/automatically-increment-build-number-cfbundleversion/</link>
      <pubDate>Wed, 21 Aug 2013 19:19:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/automatically-increment-build-number-cfbundleversion/</guid>
      <description>&lt;p&gt;David wrote this nice little helper that automatically increments the build version every time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/usr/libexec/PlistBuddy -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print CFBundleVersion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$INFOPLIST_FILE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $buildNumber | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/0*//&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;$buildNumber &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%04d&amp;#34;&lt;/span&gt; $buildNumber&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
/usr/libexec/PlistBuddy -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set :CFBundleVersion &lt;/span&gt;$buildNumber&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$INFOPLIST_FILE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Xcode just head over to &amp;ldquo;Build Phases&amp;rdquo; of your target and &amp;ldquo;Editor&amp;rdquo; -&amp;gt; &amp;ldquo;Add Build Phase&amp;rdquo; -&amp;gt; &amp;ldquo;Add Run Script Build Phase&amp;rdquo; there you can just simply paste this little script and every time you build your app the build version gets incremented.&lt;/p&gt;
&lt;p&gt;So at least I can see how many times I build a certain project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cURL and Error Codes</title>
      <link>https://loessl.org/posts/curl-and-error-codes/</link>
      <pubDate>Mon, 19 Aug 2013 14:39:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/curl-and-error-codes/</guid>
      <description>&lt;p&gt;So brew threw this at me this morning&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;56&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SSL read: error:00000000:lib&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:func&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:reason&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, errno &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This error code clearly states&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define X509_V_ERR_CRL_PATH_VALIDATION_ERROR 54
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which is actually not interesting&amp;hellip; but error code #50 is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* The application is not happy */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define X509_V_ERR_APPLICATION_VERIFICATION 50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://cvs.openssl.org/fileview?f=openssl/crypto/x509/x509_vfy.h&amp;amp;v=1.67.2.3.4.4&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ActivityManager | isUserAMonkey()</title>
      <link>https://loessl.org/posts/activitymanager-isuseramonkey/</link>
      <pubDate>Thu, 15 Aug 2013 12:45:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/activitymanager-isuseramonkey/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; isUserAMonkey

Added in API level 8

Returns &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the user &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; currently being messed with by a monkey&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update: There are more:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fyiWillBeAdvancedByHostKThx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;

Added in API level 11

Called by an AppWidgetHost to indicate that it will be automatically advancing the views of &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; AdapterViewFlipper by calling &lt;span style=&#34;color:#a6e22e&#34;&gt;advance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; at some point in the future&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This allows AdapterViewFlipper to prepare by no longer Advancing its children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isUserAGoat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;

Added in API level 17

Used to determine whether the user making &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; call is subject to teleportations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Returns whether the user making &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; call is a goat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;via &lt;a href=&#34;http://developer.android.com/reference/android/app/ActivityManager.html#isUserAMonkey&#34;&gt;ActivityManager | Android Developers&lt;/a&gt; &lt;a href=&#34;http://developer.android.com/reference/android/widget/AdapterViewFlipper.html#fyiWillBeAdvancedByHostKThx()&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;http://developer.android.com/reference/android/os/UserManager.html#isUserAGoat()&#34;&gt;and&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fixing TruePreview for Apple Mail 6.5</title>
      <link>https://loessl.org/posts/fixing-truepreview-for-apple-mail-6-5/</link>
      <pubDate>Sat, 27 Jul 2013 01:10:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/fixing-truepreview-for-apple-mail-6-5/</guid>
      <description>&lt;p&gt;If you started Mail and it tells you that your plugin got disabled you have to move the plugin first from the disabled folder back to the &amp;ldquo;normal&amp;rdquo; folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mv ~/Library/Mail/Bundles&lt;span style=&#34;color:#ae81ff&#34;&gt;\ \(&lt;/span&gt;Disabled&lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt;/TruePreview.mailbundle ~/Library/Mail/Bundles/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;after this you need to figure out the new UUIDs with these two commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults read /Applications/Mail.app/Contents/Info.plist PluginCompatibilityUUID
defaults read /System/Library/Frameworks/Message.framework/Resources/Info.plist PluginCompatibilityUUID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These two UUIDs need to go into this file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~/Library/Mail/Bundles/TruePreview.mailbundle/Contents/Info.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can either do it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults write ~/Library/Mail/Bundles/TruePreview.mailbundle/Contents/Info SupportedPluginCompatibilityUUIDs -array-add $UUID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or any other text editor.&lt;/p&gt;
&lt;p&gt;If the bundle is installed system wide of course you have to look into &lt;code&gt;/Library&lt;/code&gt; instead of &lt;code&gt;~/Library&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Source:
&lt;a href=&#34;http://langui.sh/2009/11/09/fixing-growlmail-letterbox-for-mail-4-2/#fn-811-1&#34;&gt;Fixing GrowlMail for Mail 4.2 | langui.sh&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving the security of your SSH private key files — Martin Kleppmann’s blog</title>
      <link>https://loessl.org/posts/improving-the-security-of-your-ssh-private-key-files-martin-kleppmanns-blog/</link>
      <pubDate>Wed, 03 Jul 2013 17:50:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/improving-the-security-of-your-ssh-private-key-files-martin-kleppmanns-blog/</guid>
      <description>&lt;p&gt;Read this great article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html&#34;&gt;Improving the security of your SSH private key files — Martin Kleppmann’s blog.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For my own convenience I just put all the important commands together but won&amp;rsquo;t explain anything. Again: Go and read the article.&lt;/p&gt;
&lt;p&gt;Reading &amp;ldquo;normal&amp;rdquo; ASN.1 key (RSA and DSA without passphrase):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl asn1parse -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading passphrase protected RSA key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl rsa -text -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update key from MD5 hashing to PKCS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mv key key.old
openssl pkcs8 -topk8 -v2 des3 -in key.old -out key
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; key &lt;span style=&#34;color:#75715e&#34;&gt;# IMPORTANT !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key is now back to ASN.1 structure so you can read it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl asn1parse -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Test the new key. If it works just remove the old one. If it doesn&amp;rsquo;t you still have you old key.&lt;/p&gt;
&lt;p&gt;Done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hot Corners</title>
      <link>https://loessl.org/posts/hot-corners/</link>
      <pubDate>Wed, 26 Jun 2013 16:07:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/hot-corners/</guid>
      <description>&lt;p&gt;Did you know, that you can trigger your HotCorners with a modifier key?&lt;/p&gt;
&lt;p&gt;Source:
&lt;a href=&#34;http://hints.macworld.com/article.php?story=20130621130534978&#34;&gt;http://hints.macworld.com/article.php?story=20130621130534978&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recursive git grep</title>
      <link>https://loessl.org/posts/git-r-grep/</link>
      <pubDate>Fri, 21 Jun 2013 02:15:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/git-r-grep/</guid>
      <description>&lt;p&gt;I just figured out, that I want to make sure, that I never committed a key to my repository before publishing it, so what&amp;rsquo;s the easiest way to grep throw all commits in a git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git grep USERNAME &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-list --all&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are only interested in the commits you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git log -G USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Finding the right LaTeX packages</title>
      <link>https://loessl.org/posts/finding-the-right-latex-packages/</link>
      <pubDate>Wed, 22 May 2013 13:47:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/finding-the-right-latex-packages/</guid>
      <description>&lt;p&gt;If you have little space on your machine and therefore want to install the LaTeX Basic package (which is only around 150MB instead of a couple of GB) you might run into problems that packages are missing but with &lt;code&gt;tlmgr&lt;/code&gt; this is quite easy to solve&lt;/p&gt;
&lt;p&gt;You might get errors like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;I couldn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t open style file alphadin.bst
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---line 222 of file bachelor.aux
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; : \bibstyle{alphadin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; :                   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;&lt;/span&gt;m skipping whatever remains of this command
I found no style file---while reading file bachelor.aux
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;There were &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; error messages&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
/usr/bin/texi2dvi: bibtex exited with bad status, quitting.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or similar. You can easily search for it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tlmgr search --global --file alphadin.bst
din1505: texmf-dist/bibtex/bst/din1505/alphadin.bst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--all&lt;/code&gt; is a useful search flag as well.&lt;/p&gt;
&lt;p&gt;PS: Installing works with &lt;code&gt;tlmgr&lt;/code&gt; of course as well&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mission Control</title>
      <link>https://loessl.org/posts/mission-control/</link>
      <pubDate>Mon, 20 May 2013 18:29:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/mission-control/</guid>
      <description>&lt;p&gt;To get mission control to pop up fast just write this to your plist file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults write com.apple.dock expose-animation-duration -float 0.1; killall Dock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults delete com.apple.dock expose-animation-duration; killall Dock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you can get back to default setting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac OS X is updating your preferences in the background</title>
      <link>https://loessl.org/posts/mac-os-x-is-updating-your-preferences-in-the-background/</link>
      <pubDate>Tue, 07 May 2013 16:24:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/mac-os-x-is-updating-your-preferences-in-the-background/</guid>
      <description>&lt;p&gt;Recently I noticed that a config file of Safari gets updated every now and then even if Safari is not running.&lt;/p&gt;
&lt;p&gt;The same goes for these configuration files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/Users/hashier/Library/SyncedPreferences/com.apple.Safari.plist
/Users/hashier/Library/SyncedPreferences/com.apple.syncedpreferences.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These two files are not directly readable with e.g. &lt;code&gt;cat&lt;/code&gt; but you read them with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults read /Users/hashier/Library/SyncedPreferences/com.apple.Safari.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see all your open tabs on all your iPhone, iPad, iMac, MacBook etc devices that support Safari Cloud Tabs.&lt;/p&gt;
&lt;p&gt;The other file reveals other system preferences that get synced over iCloud like some settings from Apple Mail. Just have a look and poke a bit around.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Who opens my UPnP ports?</title>
      <link>https://loessl.org/posts/who-opens-my-upnp-ports/</link>
      <pubDate>Tue, 07 May 2013 16:11:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/who-opens-my-upnp-ports/</guid>
      <description>&lt;p&gt;Recently I turned on UPnP (Universal Plug and Play) to play a bit with it and instantly noticed that someone/something opened some ports in my router and forwarded them to my machine. So of course I wanted to know what&amp;rsquo;s going on on my network.&lt;/p&gt;
&lt;p&gt;First idea &amp;ldquo;wireshark&amp;rdquo; but this only gives you information from which port these UPnP stuff goes, it doesn&amp;rsquo;t tell you the application that initiated these packages. For the curious here is the &lt;a href=&#34;http://wiki.wireshark.org/SSDP&#34;&gt;filter&lt;/a&gt; you can use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;udp.dstport &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; http &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ip.addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 192.168.1.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPnP uses the &lt;a href=&#34;http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol&#34;&gt;SSDP&lt;/a&gt; protocol which isn&amp;rsquo;t implemented by wireshark but you can simply use the http protocol because SSDP is based on &lt;a href=&#34;http://en.wikipedia.org/wiki/HTTPU&#34;&gt;HTTPU&lt;/a&gt; (yes, HTTPU).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine a picture that shows you that port 4500 and 5353 are open&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So port 4500 and 5353 (both UDP) are forwarded to my Mac but which software is behind this? Strangely&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lsof -i :4500
lsof -i :5353
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Booth show nothing&amp;hellip; which means right now nothing is listening on those ports on my machine.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Let&amp;rsquo;s see which &amp;ldquo;normal&amp;rdquo; services listen on those ports. Of course this is not 100 % certain since any program could listen on those ports.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grep &lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt; /etc/services
ipsec-msft      4500/udp    &lt;span style=&#34;color:#75715e&#34;&gt;# Microsoft IPsec NAT-T&lt;/span&gt;
ipsec-msft      4500/tcp    &lt;span style=&#34;color:#75715e&#34;&gt;# Microsoft IPsec NAT-T&lt;/span&gt;

$ grep &lt;span style=&#34;color:#ae81ff&#34;&gt;5353&lt;/span&gt; /etc/services
&lt;span style=&#34;color:#75715e&#34;&gt;#               5353        Unassigned&lt;/span&gt;
mdns            5353/udp    &lt;span style=&#34;color:#75715e&#34;&gt;# Multicast DNS&lt;/span&gt;
mdns            5353/tcp    &lt;span style=&#34;color:#75715e&#34;&gt;# Multicast DNS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I didn&amp;rsquo;t do anything with VPN or IPsec so I started googling and found this &lt;a href=&#34;http://support.apple.com/kb/TS1629&#34;&gt;Apple KB entry&lt;/a&gt; which explained to me which services forward those ports and apparently it&amp;rsquo;s just &amp;ldquo;Back to My Mac&amp;rdquo; and some &amp;ldquo;Bonjour&amp;rdquo; stuff.&lt;/p&gt;
&lt;p&gt;For the case that the service is still up and running on the port the &lt;code&gt;lsof&lt;/code&gt; output would look something like this, where you can easily read the &lt;code&gt;command&lt;/code&gt; and &lt;code&gt;PID&lt;/code&gt; that is listening on a given port:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lsof -i :32323
COMMAND   PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
Python  &lt;span style=&#34;color:#ae81ff&#34;&gt;21495&lt;/span&gt; hashier    3u  IPv4 0x23f1441a8dbc1b79      0t0  TCP *:32323 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LISTEN&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case I just started a python script which binds to port &lt;code&gt;32323&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some other quick tips of &lt;code&gt;lsof&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Print established TCP connections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lsof -P -iTCP -sTCP:ESTABLISHED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Print listening TCP connections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lsof -P -iTCP -sTCP:LISTEN
...
Python    &lt;span style=&#34;color:#ae81ff&#34;&gt;21495&lt;/span&gt; hashier    3u  IPv4 0x23f1441a8dbc1b79      0t0  TCP *:32323 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LISTEN&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and here we can as well see the listening python TCP server on &lt;code&gt;32323&lt;/code&gt;. This is a very quick way to find out all the services that are waiting for a connection.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD_PRELOAD and DYLD_INSERT_LIBRARIES</title>
      <link>https://loessl.org/posts/ld_preload-and-dyld_insert_libraries/</link>
      <pubDate>Thu, 25 Apr 2013 14:43:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/ld_preload-and-dyld_insert_libraries/</guid>
      <description>&lt;p&gt;A simple LD_PRELOAD tutorial that works under Linux can be found &lt;a href=&#34;http://www.catonmat.net/blog/simple-ld-preload-tutorial/&#34;&gt;here&lt;/a&gt;. One that can be used under OS X you should also read &lt;a href=&#34;http://blog.client9.com/2012/06/ldpreload-on-mac-os-x.html&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script to automatically login to UpUnet-S at Uppsala University</title>
      <link>https://loessl.org/posts/script-to-automatically-login-to-upunet-s-at-uppsala-university/</link>
      <pubDate>Tue, 26 Mar 2013 10:28:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/script-to-automatically-login-to-upunet-s-at-uppsala-university/</guid>
      <description>&lt;p&gt;If you want a small bash, zsh or shell script that auto authenticates you with Uppsala Universities UpUnet-S you can use this simple one liner, just add our username and password and up you go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action=Login&amp;#34;&lt;/span&gt; --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usergroup=UpUnet-S&amp;#34;&lt;/span&gt; --data-urlencode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username=YOUR_USERNAME&amp;#34;&lt;/span&gt; --data-urlencode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password=YOUR_PASSWORD&amp;#34;&lt;/span&gt; https://netlogon.student.uu.se
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are a student at SLU you can try to substitute &lt;code&gt;usergroup=UpUnet-S&lt;/code&gt; with &lt;code&gt;usergroup=SLU&lt;/code&gt; and it should work for you as well. It&amp;rsquo;s untested though.&lt;/p&gt;
&lt;p&gt;There is even an iPhone app that I wrote for it: &lt;a href=&#34;https://github.com/hashier/UpUnet-S&#34;&gt;https://github.com/hashier/UpUnet-S&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>No Such File or Directory</title>
      <link>https://loessl.org/posts/no-such-file-or-directory/</link>
      <pubDate>Fri, 15 Mar 2013 02:58:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/no-such-file-or-directory/</guid>
      <description>&lt;p&gt;bash: ./adb: No such file or directory&lt;/p&gt;
&lt;p&gt;Fix:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install ia32-libs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;via &lt;a href=&#34;http://ubuntuforums.org/showthread.php?t=1520697&#34;&gt;ubuntu bash: ./adb: No such file or directory&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to fix slow Ubuntu in VirtualBox</title>
      <link>https://loessl.org/posts/how-to-fix-slow-ubuntu-in-vbox/</link>
      <pubDate>Sat, 23 Feb 2013 00:18:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/how-to-fix-slow-ubuntu-in-vbox/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apt-get install linux-headers-generic build-essential 2. compizconfig-settings-manager dkms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the guest drivers&lt;/li&gt;
&lt;li&gt;Open ccsm (from the console) and disable &amp;ldquo;Framebuffer object&amp;rdquo; option under &amp;ldquo;OpenGL&amp;rdquo; (be prepared that you won&amp;rsquo;t be able to read much, but if you activate 3D first, then it will be even worse)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown -h now&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Activate 3D acceleration in VirtualBox&lt;/li&gt;
&lt;li&gt;power on&lt;/li&gt;
&lt;li&gt;done.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/lib/nux/unity_support_test -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Source:
&lt;a href=&#34;http://askubuntu.com/questions/207813/why-does-an-ubuntu-12-10-guest-in-virtualbox-run-very-very-slowly/214968#214968&#34;&gt;http://askubuntu.com/questions/207813/why-does-an-ubuntu-12-10-guest-in-virtualbox-run-very-very-slowly/214968#214968&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeMind</title>
      <link>https://loessl.org/posts/freemind/</link>
      <pubDate>Wed, 20 Feb 2013 11:17:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/freemind/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://freemind.sourceforge.net/wiki/index.php/Main_Page&#34;&gt;FreeMind&lt;/a&gt; is a mind-mapping software I recently started to use and I like it, so far. But let the webpage talk for itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FreeMind is a premier free mind-mapping software written in Java. The recent development has hopefully turned it into high productivity tool. We are proud that the operation and navigation of FreeMind is faster than that of MindManager because of one-click &amp;ldquo;fold / unfold&amp;rdquo; and &amp;ldquo;follow link&amp;rdquo; operations.&lt;/p&gt;
&lt;p&gt;So you want to write a completely new metaphysics? Why don&amp;rsquo;t you use FreeMind? You have a tool at hand that remarkably resembles the tray slips of Robert Pirsig, described in his sequel to Zen and the Art of Motorcycle Maintenance called Lila. Do you want to refactor your essays in a similar way you would refactor software? Or do you want to keep personal knowledge base, which is easy to manage? Why don&amp;rsquo;t you try FreeMind? Do you want to prioritize, know where you are, where you&amp;rsquo;ve been and where you are heading, as Stephen Covey would advise you? Have you tried FreeMind to keep track of all the things that are needed for that?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Safari search</title>
      <link>https://loessl.org/posts/safari-search/</link>
      <pubDate>Fri, 08 Feb 2013 14:42:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/safari-search/</guid>
      <description>&lt;p&gt;To be able to use Safari&amp;rsquo;s search function you definitely should execute this cmd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool FALSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the name states it. Your search string doesn&amp;rsquo;t need to be at the beginning of the word.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to run FreeMind on Mountain Lion</title>
      <link>https://loessl.org/posts/how-to-run-freemind-on-ml/</link>
      <pubDate>Thu, 07 Feb 2013 20:05:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/how-to-run-freemind-on-ml/</guid>
      <description>&lt;p&gt;If you try to run FreeMind on Mountain Lion you get this &amp;ldquo;nice&amp;rdquo; error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;FreeMind.app&amp;rdquo; is damaged and can&amp;rsquo;t be opened. You should move it to the Trash.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To persuade FreeMind to run anyway you can type this command into your console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;java -jar /Applications/FreeMind.app/Contents/Resources/Java/lib/freemind.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I read on the internet that you can disable GateKeeper as well to run FreeMind but I didn&amp;rsquo;t try it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java, the hopefully last round</title>
      <link>https://loessl.org/posts/java-hopefully-last-round/</link>
      <pubDate>Thu, 07 Feb 2013 18:37:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/java-hopefully-last-round/</guid>
      <description>&lt;p&gt;I had a fresh installation of Mountain Lion and installed Java 7. The problem was when I tried to run StandAloneJava applications ML always asked me whether it should install Java 6. Apparently a lot of people have this problem and here is the solution how to solve it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo mkdir /System/Library/Java/JavaVirtualMachines
sudo ln -s /Library/Java/JavaVirtualMachines/jdk_VERSION /System/Library/Java/JavaVirtualMachines/1.6.0.jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;of course you have to amend VERSION to match your Java 7 version.&lt;/p&gt;
&lt;p&gt;Caveat:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Watch out for doing the symlink&amp;hellip; Apple released 1.6 security update recently. If you apply this update from Apple, the symlink seems to fool the update and installs 1.6 update into where the symlink points to, i.e. Oracle&amp;rsquo;s 1.7.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://apple.stackexchange.com/questions/58203/mountain-lion-with-java-7-only&#34;&gt;– Jonah Tsai Jan 19 at 18:04&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iTunes: sort albums by year instead of name</title>
      <link>https://loessl.org/posts/itunes-sort-albums-by-year/</link>
      <pubDate>Wed, 06 Feb 2013 18:27:28 +0000</pubDate>
      
      <guid>https://loessl.org/posts/itunes-sort-albums-by-year/</guid>
      <description>&lt;p&gt;By default iTunes sorts albums by name instead of year for whatever reason.&lt;/p&gt;
&lt;p&gt;Anyway with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⌘j&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;you can set the sorting to year.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH key Length and fingerprint</title>
      <link>https://loessl.org/posts/ssh-key-length-and-fpr/</link>
      <pubDate>Tue, 05 Feb 2013 16:19:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/ssh-key-length-and-fpr/</guid>
      <description>&lt;p&gt;I always forget how to figure out the length and the fingerprint of a key, so here we go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -lf ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java, a new round. Round 7</title>
      <link>https://loessl.org/posts/java-a-new-round-round-7/</link>
      <pubDate>Mon, 04 Feb 2013 13:10:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/java-a-new-round-round-7/</guid>
      <description>&lt;p&gt;After fighting against Java 6 from Apple I decided to install Java 7 and have a look into that. To say the least, I still feel quite nauseous so I keep this EXTREMELY short.&lt;/p&gt;
&lt;p&gt;To get rid of Java 7 from Oracle you have to do this:&lt;/p&gt;
&lt;h2 id=&#34;remove-jre&#34;&gt;Remove JRE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;/Library/Internet Plug-Ins&lt;/code&gt; and remove &lt;code&gt;the JavaAppletPlugin.plugin&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;/Library/PreferencePanes&lt;/code&gt; and remove &lt;code&gt;JavaControlPanel.prefpane&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;remove-jdk&#34;&gt;Remove JDK&lt;/h2&gt;
&lt;p&gt;Navigate to &lt;code&gt;/Library/Java/JavaVirtualMachines&lt;/code&gt; and remove the directory of the &lt;code&gt;JDK&lt;/code&gt; you want to get rid of.&lt;/p&gt;
&lt;h2 id=&#34;removing-the-pref-panel&#34;&gt;Removing the Pref-Panel&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo rm -rf /Library/PreferencePanes/JavaControlPanel.prefpane
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jre.html&#34;&gt;http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jre.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html&#34;&gt;http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Getting rid of Java on a Mac</title>
      <link>https://loessl.org/posts/getting-rid-of-java-on-a-mac/</link>
      <pubDate>Sat, 02 Feb 2013 11:38:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/getting-rid-of-java-on-a-mac/</guid>
      <description>&lt;p&gt;If you installed Java from Apple then you have the problem, that you have got a very old Version of Java.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ java -version
java version &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.6.0_37&amp;#34;&lt;/span&gt;Java&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TM&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;build 1.6.0_37-b06-434-11M3909&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Java HotSpot&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TM&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;build 20.12-b01-434, mixed mode&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java get&amp;rsquo;s installed as a .pkg file and here is how to figure out which files this .pkg installed (unfortunately I haven&amp;rsquo;t found out where the pre- and postflight scripts are so you have to hope they don&amp;rsquo;t do anything nasty).&lt;/p&gt;
&lt;p&gt;First things first; some essential Java files are on your system after a fresh installation, so we have to figure out what files are there from the beginning. To do this we have look into&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/Library/Receipts/InstallHistory.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Right on top you can see that the &amp;ldquo;OS X Installer&amp;rdquo; installed two packages called &amp;ldquo;JavaTools&amp;rdquo; and &amp;ldquo;JavaEssentials&amp;rdquo; so we don&amp;rsquo;t touch them.&lt;/p&gt;
&lt;p&gt;Now we try to figure out all Java .pkgs that were installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;grep -i Java /Library/Receipts/InstallHistory.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we know that we have to uninstall: &amp;ldquo;JavaForMacOSX107&amp;rdquo;, &amp;ldquo;JavaSecurity&amp;rdquo; and &amp;ldquo;JavaMDNS&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To get to the files that where installed by those packages we call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd /private/var/db/receipts
lsbom -s com.apple.pkg.JavaSecurity.bom com.apple.pkg.JavaMDNS.bom com.apple.pkg.JavaForMacOSX107.bom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Last thing to do is remove the three .bom and three .plist files from: /private/var/db/receipts.&lt;/p&gt;
&lt;p&gt;You are done&lt;/p&gt;
&lt;p&gt;PS&lt;/p&gt;
&lt;p&gt;Two folder to worth looking at are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/System/Library/Java/JavaVirtualMachines/
/Library/Java/JavaVirtualMachines/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>