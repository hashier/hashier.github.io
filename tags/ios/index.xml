<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on ~/christopher.loessl</title>
    <link>https://loessl.org/tags/ios/</link>
    <description>~/christopher.loessl (iOS)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Feb 2014 15:58:00 +0000</lastBuildDate>
    
    <atom:link href="https://loessl.org/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multiple Xcode Targets and Tests</title>
      <link>https://loessl.org/posts/multiple-xcode-targets-and-tests/</link>
      <pubDate>Sun, 09 Feb 2014 15:58:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/multiple-xcode-targets-and-tests/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Go to targets -&amp;gt; Select target -&amp;gt; Duplicate (I duplicated a target which name was “tests”)&lt;/li&gt;
&lt;li&gt;Rename the target to whatever you want (I use “Tooth” here)&lt;/li&gt;
&lt;li&gt;Go to “Manage Schemes” and delete the scheme with the old name (“tests copy”) and click on “Autocreate Schemes Now”&lt;/li&gt;
&lt;li&gt;Rename the “tests copy-Info.plist” to “Tooth-Info.plist” in your “Project Navigator” (or the path where Xcode can find the .plist file)&lt;/li&gt;
&lt;li&gt;(If you need a different .pch file, you have to duplicate it in finder and add it to your project, otherwise “Tooth” will use the same .pch file as “tests”)&lt;/li&gt;
&lt;li&gt;Go to the “Build Settings” of your new target and make sure that you check the following key value pairs:
&lt;ul&gt;
&lt;li&gt;Info.plist File: Change from “tests copy-Info.plist” to “Tooth-Info.plist”&lt;/li&gt;
&lt;li&gt;Product Name: Change from “tests copy” to “$(TARGET_NAME)”&lt;/li&gt;
&lt;li&gt;Prefix Header: Change accordingly if you need a different .pch file and created it earlier&lt;/li&gt;
&lt;li&gt;Preprocessor Macros
&lt;ul&gt;
&lt;li&gt;Add something like “TOOTH=1” to your “Tooth” target and “TESTS=1” to your “tests” target (in Debug and Release)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your project doesn’t build (or link) any more now, just reopen Xcode.&lt;/p&gt;
&lt;p&gt;This is how you can decide in which target you are inside your code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if TESTS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;I&amp;#39;m the tests target&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#elif TOOTH
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;I&amp;#39;m the Tooth target&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Error: You added a new target and didn&amp;#39;t set the Macros&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-a-new-test-target&#34;&gt;Adding a new test target&lt;/h2&gt;
&lt;p&gt;Of course you want to be able to write tests for your new target as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the “Test Navigator”&lt;/li&gt;
&lt;li&gt;On the bottom left click the “+” sign and chose “New Test Target…”&lt;/li&gt;
&lt;li&gt;Select the Target you want to build tests for&lt;/li&gt;
&lt;li&gt;WAIT! Don’t worry that you don’t see any tests for the new test target, just wait…. until it’s there, or restart Xcode&lt;/li&gt;
&lt;li&gt;Right click on it and enable your test target&lt;/li&gt;
&lt;li&gt;Go to “Build Settings” and select your tests target
&lt;ul&gt;
&lt;li&gt;Framework Search Path: Add “$(SRCROOT)” otherwise you will get errors with Frameworks like Crashlytics that it can’t find #import “Crashlytics/Crashlytics.h” (I add this as a project key value so I don’t have to do it for every new test target)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start writing tests (:&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iOS Localization With iLocalize</title>
      <link>https://loessl.org/posts/ios-localization-with-ilocalize/</link>
      <pubDate>Fri, 27 Dec 2013 18:24:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/ios-localization-with-ilocalize/</guid>
      <description>&lt;p&gt;I did it once before and now I have to do it again - and of course, I forgot how to do it.
This time I&amp;rsquo;ll write it down how on way of localisation of an iOS project works.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t use nib files and all user facing strings are set in code with NSLocalizedStrings(&amp;hellip;). If you are using nibs or need to translate strings in Storyboard and/or nib files, your approach might differ.&lt;/p&gt;
&lt;p&gt;English is considered as the base language and Swedish as the translation.&lt;/p&gt;
&lt;h2 id=&#34;this-is-the-workflow-if-you-added-new-nslocalizedstring-in-your-code&#34;&gt;This is the workflow if you added new NSLocalizedString(&amp;hellip;) in your code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Have your project with NSLocalizedString&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;genstrings -o en.lproj **/*.m&lt;/code&gt; in the correct folder (zsh needed)&lt;/li&gt;
&lt;li&gt;start iLocalize&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Project&amp;rdquo; -&amp;gt; &amp;ldquo;Update from files&amp;hellip;&amp;rdquo; -&amp;gt; add the en.lproj/Localizable.strings -&amp;gt; &amp;ldquo;Update the project from a new version of these files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;click &amp;ldquo;Update&amp;rdquo;&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;this-is-the-workflow-if-you-updated-the-svlprojlocalizablestrings-files&#34;&gt;This is the workflow if you updated the sv.lproj/Localizable.strings files&lt;/h2&gt;
&lt;p&gt;e.g., manually added them in vim or you had someone translate them for you.&lt;/p&gt;
&lt;p&gt;It might be always good idea to update your Base language first so you can directly see after importing the Swedish Localizable.strings file which &amp;ldquo;Translation Keys&amp;rdquo; have changed and need updating or if the translator got everything.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In iLocalize on the top left you choose (for this example) Swedish&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Project&amp;rdquo; -&amp;gt; &amp;ldquo;Update from files&amp;hellip;&amp;rdquo; -&amp;gt; select your sv.lproj/Localizable.strings file-&amp;gt; &amp;ldquo;Update a localised language from these files&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Make sure in the box Swedish is selected&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Update&amp;rdquo;&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>