<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til on ~/christopher.loessl</title>
    <link>https://loessl.org/tags/til/</link>
    <description>~/christopher.loessl (til)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Feb 2021 18:15:03 +0100</lastBuildDate>
    
    <atom:link href="https://loessl.org/tags/til/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TIL: Big Ben</title>
      <link>https://loessl.org/posts/til-big-ben/</link>
      <pubDate>Sun, 21 Feb 2021 18:15:03 +0100</pubDate>
      
      <guid>https://loessl.org/posts/til-big-ben/</guid>
      <description>&lt;p&gt;An interesting side-channel attack—that the Britished used—during World War Two…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;During World War Two, BBC News was broadcast to Nazi-occupied Europe. Each news programme opened with a live broadcast of Big Ben tolling the hour – the magical sound of freedom. Ingenious German physicists found a way to determine the weather conditions in London based on tiny differences in the tone of the broadcast ding-dongs. This information offered invaluable help to the Luftwaffe. When the British Secret Service discovered this, they replaced the live broadcast with a set recording of the famous clock.&lt;/p&gt;
&lt;p&gt;— Sapiens: A Brief History of Humankind by Yuval Noah Harari&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>TIL: Mac in-place sed</title>
      <link>https://loessl.org/posts/til-mac-in-place-sed/</link>
      <pubDate>Wed, 17 Jun 2020 22:16:31 +0200</pubDate>
      
      <guid>https://loessl.org/posts/til-mac-in-place-sed/</guid>
      <description>&lt;p&gt;TIL how to use in-place sed on Mac.&lt;/p&gt;
&lt;p&gt;I always thought I have to use the GNU tools version of sed for in-place sed, but I was wrong. Mac sed supports in-place editing as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/pattern/d&amp;#39;&lt;/span&gt; ./infile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a caveat though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Edit files in-place, saving backups with the specified extension.  If a zero-length extension is given, no backup will be saved.  It is not recommended to give a zero-length extension when in-place editing files, as you risk corruption or partial content in situations where disk space is exhausted, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Replace all occurances of &lt;code&gt;foo&lt;/code&gt; with &lt;code&gt;bar&lt;/code&gt; in the file test.txt, without creating a backup of the file:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Automatically Increment Build Number (CFBundleVersion)</title>
      <link>https://loessl.org/posts/automatically-increment-build-number-cfbundleversion/</link>
      <pubDate>Wed, 21 Aug 2013 19:19:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/automatically-increment-build-number-cfbundleversion/</guid>
      <description>&lt;p&gt;David wrote this nice little helper that automatically increments the build version every time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/usr/libexec/PlistBuddy -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print CFBundleVersion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$INFOPLIST_FILE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $buildNumber | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/0*//&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;$buildNumber &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;
buildNumber&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%04d&amp;#34;&lt;/span&gt; $buildNumber&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
/usr/libexec/PlistBuddy -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set :CFBundleVersion &lt;/span&gt;$buildNumber&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$INFOPLIST_FILE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Xcode just head over to &amp;ldquo;Build Phases&amp;rdquo; of your target and &amp;ldquo;Editor&amp;rdquo; -&amp;gt; &amp;ldquo;Add Build Phase&amp;rdquo; -&amp;gt; &amp;ldquo;Add Run Script Build Phase&amp;rdquo; there you can just simply paste this little script and every time you build your app the build version gets incremented.&lt;/p&gt;
&lt;p&gt;So at least I can see how many times I build a certain project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving the security of your SSH private key files — Martin Kleppmann’s blog</title>
      <link>https://loessl.org/posts/improving-the-security-of-your-ssh-private-key-files-martin-kleppmanns-blog/</link>
      <pubDate>Wed, 03 Jul 2013 17:50:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/improving-the-security-of-your-ssh-private-key-files-martin-kleppmanns-blog/</guid>
      <description>&lt;p&gt;Read this great article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html&#34;&gt;Improving the security of your SSH private key files — Martin Kleppmann’s blog.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For my own convenience I just put all the important commands together but won&amp;rsquo;t explain anything. Again: Go and read the article.&lt;/p&gt;
&lt;p&gt;Reading &amp;ldquo;normal&amp;rdquo; ASN.1 key (RSA and DSA without passphrase):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl asn1parse -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading passphrase protected RSA key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl rsa -text -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update key from MD5 hashing to PKCS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mv key key.old
openssl pkcs8 -topk8 -v2 des3 -in key.old -out key
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; key &lt;span style=&#34;color:#75715e&#34;&gt;# IMPORTANT !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key is now back to ASN.1 structure so you can read it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl asn1parse -in test_rsa_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Test the new key. If it works just remove the old one. If it doesn&amp;rsquo;t you still have you old key.&lt;/p&gt;
&lt;p&gt;Done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hot Corners</title>
      <link>https://loessl.org/posts/hot-corners/</link>
      <pubDate>Wed, 26 Jun 2013 16:07:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/hot-corners/</guid>
      <description>&lt;p&gt;Did you know, that you can trigger your HotCorners with a modifier key?&lt;/p&gt;
&lt;p&gt;Source:
&lt;a href=&#34;http://hints.macworld.com/article.php?story=20130621130534978&#34;&gt;http://hints.macworld.com/article.php?story=20130621130534978&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recursive git grep</title>
      <link>https://loessl.org/posts/git-r-grep/</link>
      <pubDate>Fri, 21 Jun 2013 02:15:00 +0000</pubDate>
      
      <guid>https://loessl.org/posts/git-r-grep/</guid>
      <description>&lt;p&gt;I just figured out, that I want to make sure, that I never committed a key to my repository before publishing it, so what&amp;rsquo;s the easiest way to grep throw all commits in a git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git grep USERNAME &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-list --all&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are only interested in the commits you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git log -G USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>